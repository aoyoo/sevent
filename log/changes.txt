Index: log-test.cpp
===================================================================
--- log-test.cpp	(revision 180)
+++ log-test.cpp	(working copy)
@@ -55,6 +55,15 @@
 	LOG_INFO(logger,"this is a double:"<<setprecision(15)<<(double)1.2345234234<<endl);
 	LOG_INFO(logger,"this is a double:"<<setprecision(15)<<(long double)123452342342.342<<endl);
 
+	LOG_FATAL_VA("hello, s,%s d,%d llu,%llu",  "taotaosou", 3101, 21444444444343);
+	LOG_ERROR_VA("hello, s,%s d,%d llu,%llu",  "taotaosou", 3101, 21444444444343);
+	LOG_WARN_VA("hello, s,%s d,%d llu,%llu",  "taotaosou", 3101, 21444444444343);
+	LOG_INFO_VA("hello, s,%s d,%d llu,%llu",  "taotaosou", 3101, 21444444444343);
+	LOG_DEBUG_VA("hello, s,%s d,%d llu,%llu",  "taotaosou", 3101, 21444444444343);
+	LOG_TRACE_VA("hello, s,%s d,%d llu,%llu",  "taotaosou", 3101, 21444444444343);
+	LOG_TRACE_VA("hello, s,");
+	
+
 	//CLogger l_logger=logger;
 	//LOG_INFO(l_logger,"this is a double:"<<setprecision(15)<<(long double)123452342342.342<<endl);
 
Index: include/CLogMacros.h
===================================================================
--- include/CLogMacros.h	(revision 180)
+++ include/CLogMacros.h	(working copy)
@@ -24,6 +24,7 @@
 #include<ostream>
 #include<sstream>
 #include<iomanip>
+#include <stdarg.h>
 #include "CLogger.h"
 
 #define LOG_MACRO_BODY(logger,logRecord,logLevel) \
@@ -61,5 +62,22 @@
 	LOG_MACRO_BODY(logger, logRecord, TRACE)
 #endif
 
+#include "CLogManager.h"
+
+#define LOG_LEVEL_VA(level, fmt, ...) \
+	do {								\
+		char s[1024];						\
+		snprintf(s, 1023, fmt"\n", ##__VA_ARGS__);		\
+		CLogRecord rcd(s, __FILE__, __LINE__, CLevel(level));	\
+		CLogManager::Instance()->GetLogger().Log(rcd);		\
+	} while (0)
+
+#define LOG_FATAL_VA(fmt, ...) LOG_LEVEL_VA(FATAL_LOG_LEVEL, fmt, ##__VA_ARGS__)
+#define LOG_ERROR_VA(fmt, ...) LOG_LEVEL_VA(ERROR_LOG_LEVEL, fmt, ##__VA_ARGS__)
+#define LOG_WARN_VA(fmt, ...) LOG_LEVEL_VA(WARN_LOG_LEVEL, fmt, ##__VA_ARGS__)
+#define LOG_INFO_VA(fmt, ...) LOG_LEVEL_VA(INFO_LOG_LEVEL, fmt, ##__VA_ARGS__)
+#define LOG_DEBUG_VA(fmt, ...) LOG_LEVEL_VA(DEBUG_LOG_LEVEL, fmt, ##__VA_ARGS__)
+#define LOG_TRACE_VA(fmt, ...) LOG_LEVEL_VA(TRACE_LOG_LEVEL, fmt, ##__VA_ARGS__)
+
 #endif
 
Index: include/CSingleton-ThreadSafe.h
===================================================================
--- include/CSingleton-ThreadSafe.h	(revision 180)
+++ include/CSingleton-ThreadSafe.h	(working copy)
@@ -34,6 +34,10 @@
 public:
 	static T* Instance()
 	{
+		int &m_flag = GetFlag();
+		CThreadMutex *&m_pThMutex = GetMutex();
+		T *&m_pInstance = GetT();
+
 		if(m_flag==0)
 		{
 			m_pThMutex->WriteLock();
@@ -51,6 +55,11 @@
 
 	static void DestroyInstance()
 	{ 
+	
+		int &m_flag = GetFlag();
+		CThreadMutex *&m_pThMutex = GetMutex();
+		T *&m_pInstance = GetT();
+
 		if(m_flag!=0)
 		{
 			m_pThMutex->WriteLock();
@@ -71,6 +80,7 @@
 	}
 	virtual ~CSingleton_Ts()
 	{
+		CThreadMutex *m_pThMutex = GetMutex();
 		if(m_pThMutex!=NULL)
 		{
 			delete m_pThMutex;
@@ -83,16 +93,22 @@
 
 	}
 private:
-	static T* m_pInstance;
-	static int m_flag;
-	static CThreadMutex* m_pThMutex;
+	static T *&GetT()
+	{
+		static T* m_pInstance = NULL;
+		return m_pInstance;
+	}
+	static int &GetFlag()
+	{
+		static int m_flag = 0;
+		return m_flag;
+	}
+	static CThreadMutex *&GetMutex()
+	{
+		static CThreadMutex* m_pThMutex = new CThreadMutex;
+		return m_pThMutex;
+	}
 };
 
-template<typename T> 
-	T* CSingleton_Ts<T>:: m_pInstance=NULL;
-template<typename T> 
-	int CSingleton_Ts<T>::m_flag=0;
-template<typename T> 
-	CThreadMutex* CSingleton_Ts<T>::m_pThMutex=new CThreadMutex;
 #endif
 
Index: log-test
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
