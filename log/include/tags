!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
AddHandler	CLogManager.h	/^	void AddHandler(SharedHandlerPtr handler_ptr)$/;"	f	class:CLogManager
AddRef	Shared_Ptr.h	/^	void AddRef() const$/;"	f	class:SharedObject
AddRef	Shared_Ptr.h	/^	void AddRef()$/;"	f	class:Shared_Ptr
BroadCast	Lock.h	/^	int BroadCast()$/;"	f	class:CThreadCond
CFilter	CFilter.h	/^	CFilter()$/;"	f	class:CFilter
CFilter	CFilter.h	/^class CFilter:public SharedObject$/;"	c
CFormatter	CFormatter.h	/^	CFormatter()$/;"	f	class:CFormatter
CFormatter	CFormatter.h	/^class CFormatter:public SharedObject$/;"	c
CHandler	CHandler.h	/^	CHandler()$/;"	f	class:CHandler
CHandler	CHandler.h	/^class CHandler:public SharedObject$/;"	c
CLevel	CLevel.h	/^class CLevel\/\/:public SharedObject$/;"	c
CLevelFilter	CLevelFilter.h	/^	CLevelFilter()$/;"	f	class:CLevelFilter
CLevelFilter	CLevelFilter.h	/^class CLevelFilter:public CFilter$/;"	c
CLogFile	CLogFile.h	/^	CLogFile()$/;"	f	class:CLogFile
CLogFile	CLogFile.h	/^class CLogFile:public CSingleton_Ts<CLogFile>$/;"	c
CLogManager	CLogManager.h	/^	CLogManager()$/;"	f	class:CLogManager
CLogManager	CLogManager.h	/^class CLogManager:public CSingleton_Ts<CLogManager>$/;"	c
CLogRecord	CLogRecord.h	/^class CLogRecord$/;"	c
CLogger	CLogger.h	/^class CLogger$/;"	c
CRWLock	Lock.h	/^	CRWLock(ELockMode mode=READ_PRIORITY)$/;"	f	class:CRWLock
CRWLock	Lock.h	/^class CRWLock$/;"	c
CSingleton_Ts	CSingleton-ThreadSafe.h	/^	CSingleton_Ts()$/;"	f	class:CSingleton_Ts
CSingleton_Ts	CSingleton-ThreadSafe.h	/^	CSingleton_Ts(const CSingleton_Ts& source)$/;"	f	class:CSingleton_Ts
CSingleton_Ts	CSingleton-ThreadSafe.h	/^class CSingleton_Ts$/;"	c
CThreadCond	Lock.h	/^	CThreadCond()$/;"	f	class:CThreadCond
CThreadCond	Lock.h	/^class CThreadCond:public CThreadMutex$/;"	c
CThreadMutex	Lock.h	/^	CThreadMutex()$/;"	f	class:CThreadMutex
CThreadMutex	Lock.h	/^class CThreadMutex$/;"	c
Clock	CTime.h	/^	enum Clock{REALTIME,MONOTONIC};$/;"	g	class:Time
Close	CLogFile.h	/^	void Close()$/;"	f	class:CLogFile
ConsoleFormatter	ConsoleFormatter.h	/^	ConsoleFormatter()$/;"	f	class:ConsoleFormatter
ConsoleFormatter	ConsoleFormatter.h	/^class ConsoleFormatter:public CFormatter$/;"	c
ConsoleHandler	ConsoleHandler.h	/^	ConsoleHandler()$/;"	f	class:ConsoleHandler
ConsoleHandler	ConsoleHandler.h	/^class ConsoleHandler:public CHandler$/;"	c
CreateLogPath	CLogFile.h	/^	void CreateLogPath()$/;"	f	class:CLogFile
DEBUGMSG	CommonOperation.h	40;"	d
DEBUGMSG	CommonOperation.h	42;"	d
DEBUG_LOG_LEVEL	CLevel.h	/^	DEBUG_LOG_LEVEL,$/;"	e	enum:Log_Level_T
DEFAULT_PRIORITY	Lock.h	/^	DEFAULT_PRIORITY,$/;"	e	enum:ELockMode
DestroyInstance	CSingleton-ThreadSafe.h	/^	static void DestroyInstance()$/;"	f	class:CSingleton_Ts
ELockMode	Lock.h	/^enum ELockMode$/;"	g
ERROR_LOG_LEVEL	CLevel.h	/^	ERROR_LOG_LEVEL,$/;"	e	enum:Log_Level_T
FATAL_LOG_LEVEL	CLevel.h	/^	FATAL_LOG_LEVEL,$/;"	e	enum:Log_Level_T
FileFormatter	FileFormatter.h	/^	FileFormatter()$/;"	f	class:FileFormatter
FileFormatter	FileFormatter.h	/^class FileFormatter:public CFormatter$/;"	c
FileHandler	FileHandler.h	/^	FileHandler():CHandler(),m_log(NULL)$/;"	f	class:FileHandler
FileHandler	FileHandler.h	/^class FileHandler:public CHandler$/;"	c
FormatLog	ConsoleFormatter.h	/^	std::string FormatLog(CLogRecord record)$/;"	f	class:ConsoleFormatter
FormatLog	FileFormatter.h	/^	std::string FormatLog(CLogRecord record)$/;"	f	class:FileFormatter
GenerateFileName	CLogFile.h	/^	string GenerateFileName()$/;"	f	class:CLogFile
Get	Shared_Ptr.h	/^	T* Get()const$/;"	f	class:Shared_Ptr
GetFilter	CHandler.h	/^	SharedFilterPtr GetFilter()$/;"	f	class:CHandler
GetFormatter	CHandler.h	/^	SharedFormatterPtr GetFormatter()$/;"	f	class:CHandler
GetLevel	CLevelFilter.h	/^	CLevel GetLevel()$/;"	f	class:CLevelFilter
GetLogger	CLogManager.h	/^	CLogger& GetLogger()$/;"	f	class:CLogManager
INFO_LOG_LEVEL	CLevel.h	/^	INFO_LOG_LEVEL,$/;"	e	enum:Log_Level_T
Instance	CSingleton-ThreadSafe.h	/^	static T* Instance()$/;"	f	class:CSingleton_Ts
IsLogable	CLevelFilter.h	/^	virtual bool IsLogable(CLogRecord record)$/;"	f	class:CLevelFilter
LOG_DEBUG	CLogMacros.h	56;"	d
LOG_ERROR	CLogMacros.h	43;"	d
LOG_FATAL	CLogMacros.h	38;"	d
LOG_FILE_PATH	CLogFile.h	36;"	d
LOG_INFO	CLogMacros.h	52;"	d
LOG_MACRO_BODY	CLogMacros.h	29;"	d
LOG_PATH_MODE	CLogFile.h	39;"	d
LOG_TRACE	CLogMacros.h	60;"	d
LOG_WARN	CLogMacros.h	48;"	d
Log_Level_Name	CLevel.h	/^	static const std::string Log_Level_Name[7];$/;"	m	class:CLevel
Log_Level_T	CLevel.h	/^enum Log_Level_T$/;"	g
MAX	CommonOperation.h	52;"	d
MAX_PATH	CommonOperation.h	35;"	d
MEMORY_BARRIER	CSingleton-ThreadSafe.h	28;"	d
MIN	CommonOperation.h	56;"	d
MONOTONIC	CTime.h	/^	enum Clock{REALTIME,MONOTONIC};$/;"	e	enum:Time::Clock
OFF_LOG_LEVEL	CLevel.h	/^	OFF_LOG_LEVEL,$/;"	e	enum:Log_Level_T
Open	CLogFile.h	/^	void Open()$/;"	f	class:CLogFile
OutPut	ConsoleHandler.h	/^	void OutPut(string msg)$/;"	f	class:ConsoleHandler
OutPut	FileHandler.h	/^	void OutPut(string msg)$/;"	f	class:FileHandler
PERRORMSG	CommonOperation.h	46;"	d
PERRORMSG	CommonOperation.h	48;"	d
Publish	CHandler.h	/^	void Publish(CLogRecord record)$/;"	f	class:CHandler
READ_PRIORITY	Lock.h	/^	READ_PRIORITY$/;"	e	enum:ELockMode
REALTIME	CTime.h	/^	enum Clock{REALTIME,MONOTONIC};$/;"	e	enum:Time::Clock
ReadLock	Lock.h	/^	int ReadLock()$/;"	f	class:CRWLock
ReadLock	Lock.h	/^	int ReadLock()$/;"	f	class:CThreadMutex
RemoveHandler	CLogManager.h	/^	void RemoveHandler(SharedHandlerPtr handler_ptr)$/;"	f	class:CLogManager
RemoveRef	Shared_Ptr.h	/^	void RemoveRef() const$/;"	f	class:SharedObject
RemoveRef	Shared_Ptr.h	/^	void RemoveRef()$/;"	f	class:Shared_Ptr
SetFilter	CHandler.h	/^	void SetFilter(SharedFilterPtr filter_ptr)$/;"	f	class:CHandler
SetFormatter	CHandler.h	/^	void SetFormatter(SharedFormatterPtr formatter_ptr)$/;"	f	class:CHandler
SetLevel	CLevelFilter.h	/^	void SetLevel(CLevel level)$/;"	f	class:CLevelFilter
SetLogPath	CLogFile.h	/^	void SetLogPath(const string &path)$/;"	f	class:CLogFile
SharedFilterPtr	CFilter.h	/^typedef Shared_Ptr<CFilter> SharedFilterPtr;$/;"	t
SharedFormatterPtr	CFormatter.h	/^typedef Shared_Ptr<CFormatter> SharedFormatterPtr;$/;"	t
SharedHandlerPtr	CHandler.h	/^typedef Shared_Ptr<CHandler> SharedHandlerPtr;$/;"	t
SharedObject	Shared_Ptr.h	/^	SharedObject()$/;"	f	class:SharedObject
SharedObject	Shared_Ptr.h	/^	SharedObject(const SharedObject& rhs)$/;"	f	class:SharedObject
SharedObject	Shared_Ptr.h	/^class SharedObject$/;"	c
Shared_Ptr	Shared_Ptr.h	/^	Shared_Ptr(const Shared_Ptr& rhs)$/;"	f	class:Shared_Ptr
Shared_Ptr	Shared_Ptr.h	/^	explicit Shared_Ptr(T* p=NULL)$/;"	f	class:Shared_Ptr
Shared_Ptr	Shared_Ptr.h	/^class Shared_Ptr$/;"	c
Signal	Lock.h	/^	int Signal()$/;"	f	class:CThreadCond
TIME_BUF_SIZE	CLogFile.h	33;"	d
TRACE_LOG_LEVEL	CLevel.h	/^	TRACE_LOG_LEVEL,$/;"	e	enum:Log_Level_T
Time	CTime.h	/^class Time$/;"	c
TimeWait	Lock.h	/^	int TimeWait(int millsec=0)$/;"	f	class:CThreadCond
Tranverse16	CommonOperation.h	59;"	d
Tranverse24	CommonOperation.h	65;"	d
Tranverse32	CommonOperation.h	72;"	d
TryReadLock	Lock.h	/^	int TryReadLock()$/;"	f	class:CRWLock
TryReadLock	Lock.h	/^	int TryReadLock()$/;"	f	class:CThreadMutex
TryWriteLock	Lock.h	/^	int TryWriteLock()$/;"	f	class:CRWLock
TryWriteLock	Lock.h	/^	int TryWriteLock()$/;"	f	class:CThreadMutex
UnLock	Lock.h	/^	int UnLock()$/;"	f	class:CRWLock
UnLock	Lock.h	/^	int UnLock()$/;"	f	class:CThreadMutex
WARN_LOG_LEVEL	CLevel.h	/^	WARN_LOG_LEVEL,$/;"	e	enum:Log_Level_T
WRITE_PRIORITY	Lock.h	/^	WRITE_PRIORITY,$/;"	e	enum:ELockMode
Wait	Lock.h	/^	int Wait()$/;"	f	class:CThreadCond
WriteLock	Lock.h	/^	int WriteLock()$/;"	f	class:CRWLock
WriteLock	Lock.h	/^	int WriteLock()$/;"	f	class:CThreadMutex
__CFILTER_HH	CFilter.h	22;"	d
__CFORMATTER_HH	CFormatter.h	22;"	d
__CHANDLER_HH	CHandler.h	22;"	d
__CLEVEL_FILTER_HH	CLevelFilter.h	22;"	d
__CLEVEL_HH	CLevel.h	21;"	d
__CLOGGER_HH	CLogger.h	21;"	d
__CLOG_FILE_HH	CLogFile.h	22;"	d
__CLOG_MACROS_HH	CLogMacros.h	22;"	d
__CLOG_MANAGER_HH	CLogManager.h	22;"	d
__CLOG_RECORD_HH	CLogRecord.h	22;"	d
__COMMON_OPERATION_HH	CommonOperation.h	22;"	d
__CONSOLE_FORMATTER_HH	ConsoleFormatter.h	21;"	d
__CONSOLE_HANDLER_HH	ConsoleHandler.h	22;"	d
__FILE_FORMATTER_HH	FileFormatter.h	22;"	d
__FILE_HANDLER_HH	FileHandler.h	22;"	d
__LOCK_HH	Lock.h	22;"	d
__LOG_HH	Log.h	22;"	d
__SHARED_PTR_HH	Shared_Ptr.h	22;"	d
__SINGLETON_THREAD_SAFETY_HH	CSingleton-ThreadSafe.h	22;"	d
__TIME_HH	CTime.h	22;"	d
m_FileLine	CLogRecord.h	/^	int m_FileLine;$/;"	m	class:CLogRecord
m_FileName	CLogRecord.h	/^	std::string m_FileName;$/;"	m	class:CLogRecord
m_FilterPtr	CHandler.h	/^	SharedFilterPtr m_FilterPtr;$/;"	m	class:CHandler
m_FormatterPtr	CHandler.h	/^	SharedFormatterPtr m_FormatterPtr;$/;"	m	class:CHandler
m_Level	CLevelFilter.h	/^	CLevel m_Level;$/;"	m	class:CLevelFilter
m_Level	CLogRecord.h	/^	CLevel m_Level;$/;"	m	class:CLogRecord
m_LevelName	CLevel.h	/^	std::string m_LevelName;$/;"	m	class:CLevel
m_LevelValue	CLevel.h	/^	Log_Level_T m_LevelValue;$/;"	m	class:CLevel
m_Logger	CLogManager.h	/^	CLogger m_Logger;$/;"	m	class:CLogManager
m_Message	CLogRecord.h	/^	std::string m_Message;$/;"	m	class:CLogRecord
m_Mutex	CLogFile.h	/^	CThreadMutex m_Mutex;$/;"	m	class:CLogFile
m_Mutex	CLogger.h	/^	CThreadMutex m_Mutex;$/;"	m	class:CLogger
m_Mutex	Shared_Ptr.h	/^	mutable CThreadMutex m_Mutex;$/;"	m	class:SharedObject
m_Pointee	Shared_Ptr.h	/^	T* m_Pointee;$/;"	m	class:Shared_Ptr
m_RWLock	Lock.h	/^	pthread_rwlock_t m_RWLock;$/;"	m	class:CRWLock
m_StreamBuf	CLogFile.h	/^	streambuf* m_StreamBuf;$/;"	m	class:CLogFile
m_ThreadID	CLogRecord.h	/^	std::string m_ThreadID;$/;"	m	class:CLogRecord
m_TimeStamp	CLogRecord.h	/^	Time m_TimeStamp;$/;"	m	class:CLogRecord
m_Usec	CTime.h	/^	int64_t m_Usec;$/;"	m	class:Time
m_cond	Lock.h	/^	pthread_cond_t m_cond;$/;"	m	class:CThreadCond
m_count	Shared_Ptr.h	/^	mutable int m_count;$/;"	m	class:SharedObject
m_flag	CSingleton-ThreadSafe.h	/^	int CSingleton_Ts<T>::m_flag=0;$/;"	m	class:CSingleton_Ts
m_flag	CSingleton-ThreadSafe.h	/^	static int m_flag;$/;"	m	class:CSingleton_Ts
m_log	FileHandler.h	/^	CLogFile* m_log;$/;"	m	class:FileHandler
m_mMutex	Lock.h	/^	pthread_mutex_t m_mMutex;$/;"	m	class:CThreadMutex
m_pInstance	CSingleton-ThreadSafe.h	/^	T* CSingleton_Ts<T>:: m_pInstance=NULL;$/;"	m	class:CSingleton_Ts
m_pInstance	CSingleton-ThreadSafe.h	/^	static T* m_pInstance;$/;"	m	class:CSingleton_Ts
m_pLogFile	CLogFile.h	/^	ofstream*m_pLogFile;$/;"	m	class:CLogFile
m_pThMutex	CSingleton-ThreadSafe.h	/^	CThreadMutex* CSingleton_Ts<T>::m_pThMutex=new CThreadMutex;$/;"	m	class:CSingleton_Ts
m_pThMutex	CSingleton-ThreadSafe.h	/^	static CThreadMutex* m_pThMutex;$/;"	m	class:CSingleton_Ts
m_strLogFile	CLogFile.h	/^	string m_strLogFile;$/;"	m	class:CLogFile
m_strLogPath	CLogFile.h	/^	string m_strLogPath;$/;"	m	class:CLogFile
m_vHandlers	CLogger.h	/^	vector<SharedHandlerPtr> m_vHandlers;$/;"	m	class:CLogger
operator !	Shared_Ptr.h	/^	bool operator ! () const$/;"	f	class:Shared_Ptr
operator !=	CTime.h	/^	bool operator!=(const Time& rhs)const$/;"	f	class:Time
operator !=	Shared_Ptr.h	/^	bool operator!=(const Shared_Ptr& rhs)const$/;"	f	class:Shared_Ptr
operator !=	Shared_Ptr.h	/^	bool operator!=(const T* rhs)const$/;"	f	class:Shared_Ptr
operator *	CTime.h	/^	Time operator*(double rhs)const$/;"	f	class:Time
operator *	CTime.h	/^	Time operator*(int rhs)const$/;"	f	class:Time
operator *	CTime.h	/^	Time operator*(int64_t rhs)const$/;"	f	class:Time
operator *	Shared_Ptr.h	/^	T& operator*()const$/;"	f	class:Shared_Ptr
operator *=	CTime.h	/^	Time& operator*=(double rhs)$/;"	f	class:Time
operator *=	CTime.h	/^	Time& operator*=(int rhs)$/;"	f	class:Time
operator *=	CTime.h	/^	Time& operator*=(int64_t rhs)$/;"	f	class:Time
operator +	CTime.h	/^	Time operator+(const Time& rhs)const$/;"	f	class:Time
operator +=	CTime.h	/^	Time& operator+=(const Time& rhs)$/;"	f	class:Time
operator -	CTime.h	/^	Time operator-(const Time& rhs)const$/;"	f	class:Time
operator -=	CTime.h	/^	Time& operator-=(const Time& rhs)$/;"	f	class:Time
operator ->	Shared_Ptr.h	/^	T* operator->()const$/;"	f	class:Shared_Ptr
operator /	CTime.h	/^	Time operator\/(double rhs)$/;"	f	class:Time
operator /	CTime.h	/^	Time operator\/(int rhs)const$/;"	f	class:Time
operator /	CTime.h	/^	Time operator\/(int64_t rhs)$/;"	f	class:Time
operator /	CTime.h	/^	double operator\/(const Time& rhs)const$/;"	f	class:Time
operator /=	CTime.h	/^	Time& operator\/=(double rhs)$/;"	f	class:Time
operator /=	CTime.h	/^	Time& operator\/=(int rhs)$/;"	f	class:Time
operator /=	CTime.h	/^	Time& operator\/=(int64_t rhs)$/;"	f	class:Time
operator <	CTime.h	/^	bool operator<(const Time& rhs)const$/;"	f	class:Time
operator <<	CLogFile.h	/^	friend ostream &operator<<(CLogFile& log_os,T *t)$/;"	f	class:CLogFile
operator <<	CLogFile.h	/^	friend ostream &operator<<(CLogFile& log_os,const char& t)$/;"	f	class:CLogFile
operator <<	CLogFile.h	/^	friend ostream &operator<<(CLogFile& log_os,const double& t)$/;"	f	class:CLogFile
operator <<	CLogFile.h	/^	friend ostream &operator<<(CLogFile& log_os,const float& t)$/;"	f	class:CLogFile
operator <<	CLogFile.h	/^	friend ostream &operator<<(CLogFile& log_os,const long long& t)$/;"	f	class:CLogFile
operator <<	CLogFile.h	/^	friend ostream &operator<<(CLogFile& log_os,const long& t)$/;"	f	class:CLogFile
operator <<	CLogFile.h	/^	friend ostream &operator<<(CLogFile& log_os,const string& t)$/;"	f	class:CLogFile
operator <<	CLogFile.h	/^	friend ostream &operator<<(CLogFile& log_os,int t)$/;"	f	class:CLogFile
operator <=	CTime.h	/^	bool operator<=(const Time& rhs)const$/;"	f	class:Time
operator =	Shared_Ptr.h	/^	SharedObject& operator=(const SharedObject&)$/;"	f	class:SharedObject
operator =	Shared_Ptr.h	/^	Shared_Ptr& operator=(T* rhs)$/;"	f	class:Shared_Ptr
operator =	Shared_Ptr.h	/^	Shared_Ptr& operator=(const Shared_Ptr& rhs)$/;"	f	class:Shared_Ptr
operator ==	CTime.h	/^	bool operator==(const Time& rhs)const$/;"	f	class:Time
operator ==	Shared_Ptr.h	/^	bool operator==(const Shared_Ptr& rhs)const$/;"	f	class:Shared_Ptr
operator ==	Shared_Ptr.h	/^	bool operator==(const T* rhs)const$/;"	f	class:Shared_Ptr
operator >	CTime.h	/^	bool operator>(const Time& rhs)const$/;"	f	class:Time
operator >=	CTime.h	/^	bool operator>=(const Time& rhs)const$/;"	f	class:Time
swap	Shared_Ptr.h	/^	void swap (Shared_Ptr & other) throw ()$/;"	f	class:Shared_Ptr
~CFilter	CFilter.h	/^	virtual ~CFilter()$/;"	f	class:CFilter
~CFormatter	CFormatter.h	/^	virtual ~CFormatter()$/;"	f	class:CFormatter
~CHandler	CHandler.h	/^	~CHandler()$/;"	f	class:CHandler
~CLevelFilter	CLevelFilter.h	/^	virtual ~CLevelFilter()$/;"	f	class:CLevelFilter
~CLogFile	CLogFile.h	/^	~CLogFile()$/;"	f	class:CLogFile
~CLogManager	CLogManager.h	/^	~CLogManager()$/;"	f	class:CLogManager
~CRWLock	Lock.h	/^	~CRWLock()$/;"	f	class:CRWLock
~CSingleton_Ts	CSingleton-ThreadSafe.h	/^	virtual ~CSingleton_Ts()$/;"	f	class:CSingleton_Ts
~CThreadCond	Lock.h	/^	~CThreadCond()$/;"	f	class:CThreadCond
~CThreadMutex	Lock.h	/^	~CThreadMutex()$/;"	f	class:CThreadMutex
~ConsoleFormatter	ConsoleFormatter.h	/^	~ConsoleFormatter()$/;"	f	class:ConsoleFormatter
~FileFormatter	FileFormatter.h	/^	~FileFormatter()$/;"	f	class:FileFormatter
~FileHandler	FileHandler.h	/^	~FileHandler()$/;"	f	class:FileHandler
~SharedObject	Shared_Ptr.h	/^	virtual ~SharedObject()$/;"	f	class:SharedObject
~Shared_Ptr	Shared_Ptr.h	/^	~Shared_Ptr()$/;"	f	class:Shared_Ptr
